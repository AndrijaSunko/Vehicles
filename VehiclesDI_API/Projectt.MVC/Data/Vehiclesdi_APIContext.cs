// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Project.MVC2.Models;

namespace Project.MVC2.Data
{
    public partial class Vehiclesdi_APIContext : DbContext
    {
        public Vehiclesdi_APIContext()
        {
        }

        public Vehiclesdi_APIContext(DbContextOptions<Vehiclesdi_APIContext> options)
            : base(options)
        {
        }

        public virtual DbSet<VehicleMake> VehicleMake { get; set; }
        public virtual DbSet<VehicleModel> VehicleModel { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=VehiclesDI_API;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VehicleMake>(entity =>
            {
                entity.Property(e => e.Abrv).IsRequired();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<VehicleModel>(entity =>
            {
                entity.HasIndex(e => e.MakeId, "IX_VehicleModel_MakeId");

                entity.Property(e => e.Abrv).IsRequired();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.Make)
                    .WithMany(p => p.VehicleModel)
                    .HasForeignKey(d => d.MakeId);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}